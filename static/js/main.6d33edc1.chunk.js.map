{"version":3,"sources":["app/index.js","participants/components/participant.js","index.js","store/configureStore.js","store/configureStore.prod.js","app/containers/root.js","app/containers/root.prod.js","app/components/app.js","i18n/injectIntlProvider.js","i18n/helper.js","app/components/header/header.js","assets/logo.svg","loadList/index.js","loadList/containers/loadList.js","loadList/actions.js","participants/actionsTypes.js","loadList/components/loadList.js","uploadFile/index.js","uploadFile/containers/uploadFile.js","uploadFile/components/uploadFile.js","rouletteButton/index.js","rouletteButton/containers/rouletteButton.js","rouletteButton/components/rouletteButton.js","participants/index.js","participants/containers/participants.js","card/index.js","card/components/card.js","participants/containers/selectedParticipant.js","app/reducers.js","participants/reducer.js","app/containers/devTools.js","participants/actions.js","store/localStorage.js","serviceWorker.js"],"names":["Root","active","description","index","name","selected","removeParticipant","containerClass","participant__selected","className","title","handleDeleteClick","ReactDOM","render","store","document","getElementById","serviceWorker","unregister","module","exports","require","middleware","thunk","enhancer","applyMiddleware","initialState","loadState","createStore","rootReducer","participantsState","subscribe","saveState","participants","getState","Provider","FormattedMessage","id","SelectedParticipant","addLocaleData","WrappedComponent","IntlProvider","getLanguageConfig","messages","en","es","locale_en","locale_es","currentLanguage","navigator","language","split","locale","src","logo","alt","LoadList","connect","loadParticipants","useState","input","setInput","inputValue","onLoad","updateInputValue","evt","target","value","inputValues","dispatch","map","participant","push","trim","actions","updateParticipantList","SET_SELECTED_PARTICIPANT","REMOVE_PARTICIPANT_LIST_SUCCESS","UPDATE_PARTICIPANT_LIST","UPDATE_PARTICIPANT_LIST_ERROR","injectIntl","intl","type","placeholder","formatMessage","onChange","variant","color","onClick","UploadFile","fileUpload","file","setFile","onFileChange","e","files","onFileUpload","RouletteButton","setRandomParticipant","Participants","state","selectedParticipant","length","currentName","key","getParticipantsCard","Card","useStyles","makeStyles","card","maxWidth","cardTitle","textAlign","cardRoot","marginLeft","padding","cardActionRoot","deleteIcon","avatar","backgroundColor","red","classes","avatarClass","firstLetter","substring","toUpperCase","aria-label","root","component","disableSpacing","combineReducers","handleActions","setSelectedParticipant","action","payload","combineActions","removeParticipantListSuccess","updateParticipantListError","error","fetching","createDevTools","toggleVisibilityKey","changePositionKey","defaultIsVisible","theme","createActions","actionTypes","slice","shift","splice","reader","FileReader","onload","event","JSON","parse","result","readAsText","serializedState","localStorage","getItem","err","setItem","stringify","config","URL","process","window","location","href","origin","addEventListener","swUrl","isLocalhost","fetch","then","response","contentType","headers","get","status","indexOf","ready","registration","reload","registerValidSW","catch","console","log","checkValidServiceWorker","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.6d33edc1.chunk.js","sourcesContent":["import Root from './containers/root';\nimport { rootReducer } from './reducers';\nimport DevTools from './containers/devTools';\n\nexport default Root;\nexport { rootReducer, DevTools };\n","import './participant.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Card from '../../card';\n\nconst Participant = ({ active, description, index, name, selected, removeParticipant }) => {\n    const containerClass = classnames({\n        participant__selected: selected,\n    });\n\n    const handleDeleteClick = () => {\n        removeParticipant(index);\n    };\n\n    return (\n        <div className='participant'>\n            <div className={containerClass}>\n                <Card\n                    active={active}\n                    description={description}\n                    title={name}\n                    handleDeleteClick={handleDeleteClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nParticipant.propTypes = {\n    active: PropTypes.bool,\n    description: PropTypes.string,\n    index: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    selected: PropTypes.bool,\n    removeParticipant: PropTypes.func.isRequired,\n};\n\nexport default Participant;\n","import './index.scss';\nimport 'bootstrap/scss/bootstrap.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport configureStore from '../src/store/configureStore';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './app';\n\nReactDOM.render(<Root store={configureStore()} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","if (process.env.NODE_ENV === 'production') {\n    module.exports = require('./configureStore.prod');\n} else {\n    module.exports = require('./configureStore.dev');\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\n\nimport { rootReducer } from '../app';\nimport { loadState, saveState } from './localStorage';\n\nconst middleware = [thunk, reduxImmutableStateInvariant()];\n\nconst enhancer = applyMiddleware(...middleware);\n\nconst configureStore = () => {\n    const initialState = loadState();\n\n    const store = createStore(\n        rootReducer,\n        initialState ? { participantsState: { ...initialState } } : initialState,\n        enhancer,\n    );\n\n    store.subscribe(() => {\n        saveState({\n            participants: store.getState().participantsState.participants,\n        });\n    });\n\n    return store;\n};\n\nexport default configureStore;\n","if (process.env.NODE_ENV === 'production') {\n    module.exports = require('./root.prod');\n} else {\n    module.exports = require('./root.dev');\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\n\nimport App from '../components/app';\n\nconst Root = ({ store }) => {\n    return (\n        <Provider store={store}>\n            <App />\n        </Provider>\n    );\n};\n\nRoot.propTypes = {\n    store: PropTypes.object.isRequired,\n};\n\nexport default Root;\n","import './app.scss';\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport injectIntlProvider from '../../i18n/injectIntlProvider';\nimport Header from './header/header';\nimport LoadList from '../../loadList';\nimport UploadFile from '../../uploadFile';\nimport RouletteButton from '../../rouletteButton';\nimport Participants, { SelectedParticipant } from '../../participants';\n\nconst App = () => {\n    return (\n        <div className='app'>\n            <Header />\n            <div className='row app__container'>\n                <div className='col-md-5'>\n                    <LoadList />\n                </div>\n                <div className='col-md-2 app__or'>\n                    <FormattedMessage id='or-separator' />\n                </div>\n                <div className='col-md-5'>\n                    <UploadFile />\n                </div>\n                <div className='col-md-12'>\n                    <RouletteButton />\n                    <SelectedParticipant />\n                    <Participants />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default injectIntlProvider(App);\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport { addLocaleData, getLanguageConfig } from './helper';\n\naddLocaleData();\n\nconst injectIntlProvider = WrappedComponent => {\n    const Wrapper = () => (\n        <IntlProvider {...getLanguageConfig()}>\n            <WrappedComponent />\n        </IntlProvider>\n    );\n    return Wrapper;\n};\n\nexport default injectIntlProvider;\n","import { addLocaleData as addLocalData } from 'react-intl';\nimport locale_en from 'react-intl/locale-data/en';\nimport locale_es from 'react-intl/locale-data/es';\n\nimport en from './en.json';\nimport es from './es.json';\n\nconst messages = {\n    en: en,\n    es: es,\n};\n\nconst addLocaleData = () => {\n    addLocalData([...locale_en, ...locale_es]);\n};\n\nconst getCurrentLanguage = () => {\n    return navigator.language.split(/[-_]/)[0];\n};\n\nconst getLanguageConfig = () => {\n    const currentLanguage = getCurrentLanguage();\n\n    return {\n        locale: currentLanguage,\n        messages: messages[currentLanguage],\n    };\n};\n\nexport { addLocaleData, getLanguageConfig };\n","import './header.scss';\nimport logo from '../../../assets/logo.svg';\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst header = () => {\n    return (\n        <header className='header'>\n            <img src={logo} className='header__logo' alt='logo' />\n            <h1 className='header__title'>\n                <FormattedMessage id='header-title' />\n            </h1>\n        </header>\n    );\n};\n\nexport default header;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import LoadList from './containers/loadList';\n\nexport default LoadList;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { loadParticipants } from '../actions';\n\nimport LoadList from '../components/loadList';\n\nconst LoadListContainer = ({ loadParticipants }) => {\n    const [input, setInput] = useState('');\n\n    const updateInputValue = evt => {\n        setInput(evt.target.value);\n    };\n\n    return (\n        <LoadList\n            inputValue={input}\n            onLoad={loadParticipants}\n            updateInputValue={updateInputValue}\n        />\n    );\n};\n\nLoadListContainer.propTypes = {\n    loadParticipants: PropTypes.func.isRequired,\n};\n\nexport default connect(\n    null,\n    {\n        loadParticipants,\n    },\n)(LoadListContainer);\n","import { actions } from '../participants/actions';\n\nconst loadParticipants = inputValues => dispatch => {\n    const participants = [];\n\n    if (inputValues) {\n        inputValues.split(',').map(participant => participants.push({ name: participant.trim() }));\n        dispatch(actions.updateParticipantList({ participants }));\n    }\n};\n\nexport { loadParticipants };\n","const actionTypes = {\n    SET_SELECTED_PARTICIPANT: 'SET_SELECTED_PARTICIPANT',\n    REMOVE_PARTICIPANT_LIST_SUCCESS: 'REMOVE_PARTICIPANT_LIST_SUCCESS',\n    UPDATE_PARTICIPANT_LIST: 'UPDATE_PARTICIPANT_LIST',\n    UPDATE_PARTICIPANT_LIST_ERROR: 'UPDATE_PARTICIPANT_LIST_ERROR',\n};\n\nexport default actionTypes;\n","import './loadList.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\n//material-components\nimport Button from '@material-ui/core/Button';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\n\nconst loadList = ({ inputValue, intl, onLoad, updateInputValue }) => {\n    return (\n        <div className='load-list'>\n            <input\n                className='form-control load-list__input'\n                type='input'\n                value={inputValue}\n                placeholder={intl.formatMessage({ id: 'load-list-placeholder' })}\n                onChange={updateInputValue}\n            />\n            <Button variant='contained' color='primary' onClick={() => onLoad(inputValue)}>\n                <label className='load-list__icon-label'>\n                    <FormattedMessage id='load' />\n                </label>\n                <CloudUpload />\n            </Button>\n        </div>\n    );\n};\n\nloadList.propTypes = {\n    inputValue: PropTypes.string.isRequired,\n    intl: PropTypes.object.isRequired,\n    onLoad: PropTypes.func.isRequired,\n    updateInputValue: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(loadList);\n","import UploadFile from './containers/uploadFile';\n\nexport default UploadFile;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { fileUpload } from '../../participants/actions';\n\nimport UploadFile from '../components/uploadFile';\n\nconst UploadFileContainer = ({ fileUpload }) => {\n    const [file, setFile] = useState(null);\n\n    const onFileChange = e => {\n        const file = !!e.target.files && e.target.files[0];\n        setFile(file);\n        e.target.value = '';\n    };\n\n    const onFileUpload = () => {\n        fileUpload(file);\n    };\n\n    return <UploadFile onFileChange={onFileChange} onFileUpload={onFileUpload} />;\n};\n\nUploadFileContainer.propTypes = {\n    fileUpload: PropTypes.func.isRequired,\n};\n\nexport default connect(\n    null,\n    {\n        fileUpload,\n    },\n)(UploadFileContainer);\n","import './uploadFile.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '@material-ui/core/Button';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\n\nconst UploadFile = ({ onFileChange, onFileUpload }) => {\n    return (\n        <div className='upload-file'>\n            <input\n                className='form-control upload-file__input'\n                type='file'\n                placeholder='Load your file'\n                onChange={onFileChange}\n            />\n            <Button variant='contained' color='primary' onClick={onFileUpload}>\n                <label className='upload-file__icon-label'>\n                    <FormattedMessage id='upload' />\n                </label>\n                <CloudUpload />\n            </Button>\n        </div>\n    );\n};\n\nUploadFile.propTypes = {\n    onFileChange: PropTypes.func.isRequired,\n    onFileUpload: PropTypes.func.isRequired,\n};\n\nexport default UploadFile;\n","import RouletteButton from './containers/rouletteButton';\n\nexport default RouletteButton;\n","import { connect } from 'react-redux';\n\nimport { setRandomParticipant } from '../../participants/actions';\n\nimport RouletteButton from '../components/rouletteButton';\n\nexport default connect(\n    null,\n    {\n        setRandomParticipant,\n    },\n)(RouletteButton);\n","import './rouletteButton.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '@material-ui/core/Button';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\nconst RouletteButton = ({ setRandomParticipant }) => {\n    return (\n        <div className='roulette-button'>\n            <Button variant='contained' color='primary' onClick={setRandomParticipant}>\n                <FormattedMessage id='roulette' />\n                <AutorenewIcon />\n            </Button>\n        </div>\n    );\n};\n\nRouletteButton.propTypes = {\n    setRandomParticipant: PropTypes.func.isRequired,\n};\n\nexport default RouletteButton;\n","import Participants from './containers/participants';\nimport SelectedParticipant from './containers/selectedParticipant';\n\nexport default Participants;\nexport { SelectedParticipant };\n","import './participants.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\n\nimport { removeParticipant } from '../actions';\n\nimport Participant from '../components/participant';\n\nconst Participants = ({ participants, selectedParticipant, removeParticipant }) => {\n    const getParticipantsCard = () => {\n        const currentName = selectedParticipant ? selectedParticipant.name : null;\n\n        return participants.map((participant, index) => {\n            const name = participant.name;\n            const active = isEqual(currentName, name);\n\n            return (\n                <div key={`participant-${index}`} className='col-md-3'>\n                    <Participant\n                        active={active}\n                        description={get(participant, 'description', 'An awesome member!')}\n                        index={index}\n                        name={name}\n                        removeParticipant={removeParticipant}\n                    />\n                </div>\n            );\n        });\n    };\n\n    const buildContent = () => {\n        return participants.length ? (\n            getParticipantsCard()\n        ) : (\n            <div className='participants__no-content'>\n                <FormattedMessage id='participants-empty' />\n            </div>\n        );\n    };\n\n    return (\n        <div className='participants'>\n            <div className='row'>{buildContent()}</div>\n        </div>\n    );\n};\n\nParticipants.propTypes = {\n    participants: PropTypes.array.isRequired,\n    selectedParticipant: PropTypes.object,\n    removeParticipant: PropTypes.func.isRequired,\n};\n\nexport default connect(\n    state => ({\n        participants: state.participantsState.participants,\n        selectedParticipant: state.participantsState.selectedParticipant,\n    }),\n    { removeParticipant },\n)(Participants);\n","import Card from './components/card';\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles(() => ({\n    card: {\n        maxWidth: 345,\n    },\n    cardTitle: {\n        textAlign: 'left',\n    },\n    cardRoot: {\n        textAlign: 'left',\n        marginLeft: '74px',\n        padding: 0,\n    },\n    cardActionRoot: {\n        padding: '0 8px 8px 8px',\n    },\n    deleteIcon: {\n        marginLeft: 'auto',\n    },\n    avatar: {\n        backgroundColor: red[500],\n    },\n}));\n\nconst CustomCard = ({ active, description, handleDeleteClick, title }) => {\n    const classes = useStyles();\n    const avatarClass = active ? classes.avatar : '';\n    const firstLetter = title ? title.substring(0, 1).toUpperCase() : null;\n\n    return (\n        <Card className={classes.card}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label='avartar-letter' className={avatarClass}>\n                        {firstLetter}\n                    </Avatar>\n                }\n                classes={{ title: classes.cardTitle }}\n                title={title}\n            />\n            <CardContent classes={{ root: classes.cardRoot }}>\n                <Typography color='textSecondary' component='p'>\n                    {description}\n                </Typography>\n            </CardContent>\n            <CardActions classes={{ root: classes.cardActionRoot }} disableSpacing>\n                <IconButton\n                    className={classes.deleteIcon}\n                    onClick={handleDeleteClick}\n                    aria-label='delete'>\n                    <DeleteIcon />\n                </IconButton>\n            </CardActions>\n        </Card>\n    );\n};\n\nCustomCard.propTypes = {\n    active: PropTypes.bool,\n    description: PropTypes.string,\n    handleDeleteClick: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    selected: PropTypes.bool,\n};\n\nexport default CustomCard;\n","import './selectedParticipant.scss';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { removeParticipant } from '../actions';\n\nimport Participant from '../components/participant';\n\nconst SelectedParticipant = ({ selectedParticipant, removeParticipant }) => {\n    return selectedParticipant ? (\n        <div className='col-md-12 selected-participant'>\n            <Participant\n                active\n                description={selectedParticipant.description}\n                index={selectedParticipant.index}\n                name={selectedParticipant.name}\n                selected\n                removeParticipant={removeParticipant}\n            />\n        </div>\n    ) : null;\n};\n\nSelectedParticipant.propTypes = {\n    selectedParticipant: PropTypes.object,\n    removeParticipant: PropTypes.func.isRequired,\n};\n\nexport default connect(\n    state => ({\n        selectedParticipant: state.participantsState.selectedParticipant,\n    }),\n    {\n        removeParticipant,\n    },\n)(SelectedParticipant);\n","import { combineReducers } from 'redux';\nimport participants from '../participants/reducer';\n\nexport const rootReducer = combineReducers({\n    participantsState: participants,\n});\n","import { handleActions, combineActions } from 'redux-actions';\n\nimport { actions } from './actions';\n\nconst initialState = {\n    fetching: false,\n    participants: [],\n    selectedParticipant: null,\n    error: null,\n};\n\nconst participantsReducer = handleActions(\n    {\n        [actions.setSelectedParticipant]: (state, action) => ({\n            ...state,\n            selectedParticipant: action.payload.selectedParticipant,\n        }),\n\n        [combineActions(actions.removeParticipantListSuccess, actions.updateParticipantList)]: (\n            state,\n            action,\n        ) => ({\n            ...state,\n            participants: action.payload.participants,\n            selectedParticipant: null,\n        }),\n\n        [actions.updateParticipantListError]: (state, action) => ({\n            ...state,\n            error: action.payload.error,\n            selectedParticipant: null,\n        }),\n    },\n    initialState,\n);\n\nexport default participantsReducer;\n","import React from 'react';\nimport { createDevTools } from 'redux-devtools';\nimport LogMonitor from 'redux-devtools-log-monitor';\nimport DockMonitor from 'redux-devtools-dock-monitor';\n\nconst DevTools = createDevTools(\n    <DockMonitor toggleVisibilityKey='ctrl-h' changePositionKey='ctrl-q' defaultIsVisible={false}>\n        <LogMonitor theme='tomorrow' />\n    </DockMonitor>,\n);\n\nexport default DevTools;\n","import { createActions } from 'redux-actions';\nimport random from 'lodash/random';\n\nimport actionTypes from './actionsTypes';\n\nconst actions = createActions(\n    actionTypes.SET_SELECTED_PARTICIPANT,\n    actionTypes.REMOVE_PARTICIPANT_LIST_SUCCESS,\n    actionTypes.UPDATE_PARTICIPANT_LIST,\n    actionTypes.UPDATE_PARTICIPANT_LIST_ERROR,\n);\n\nconst setRandomParticipant = () => (dispatch, getState) => {\n    const participants = getState().participantsState.participants;\n\n    if (participants.length) {\n        const index = random(0, participants.length - 1);\n        const selectedParticipant = { ...participants[index], index };\n\n        dispatch(actions.setSelectedParticipant({ selectedParticipant }));\n    }\n};\n\nconst removeParticipant = index => (dispatch, getState) => {\n    const participants = getState().participantsState.participants.slice();\n\n    if (index === 0) {\n        participants.shift();\n    } else {\n        participants.splice(index, 1);\n    }\n\n    dispatch(actions.removeParticipantListSuccess({ participants }));\n};\n\nconst fileUpload = file => dispatch => {\n    if (file) {\n        const reader = new FileReader();\n\n        reader.onload = event => {\n            try {\n                const participants = JSON.parse(event.target.result);\n                dispatch(actions.updateParticipantList({ participants }));\n            } catch (error) {\n                dispatch(actions.updateParticipantListError({ error }));\n            }\n        };\n\n        reader.readAsText(file);\n    }\n};\n\nexport { actions, fileUpload, setRandomParticipant, removeParticipant };\n","export const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = state => {\n    try {\n        localStorage.setItem('state', JSON.stringify(state));\n    } catch (err) {\n        //ignore the errors\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"],"sourceRoot":""}